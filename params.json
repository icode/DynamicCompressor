{"tagline":"一条JAVA的前端自动优化压缩器程序，旨在提高响应速度，降低开发维护成本。","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"DynamicCompressor","google":"UA-19659586-5","body":"###动态压缩器能帮我做什么?\r\n\r\n合并压缩JS CSS代码,编译GSS模版,编译LESS模版,压缩后的版本会被缓存.\r\n\r\n压缩器采用LRU算法,有较为完善的内存缓存与本地缓存相结合的缓存方式,将服务器响应时间做到更高.\r\n\r\n将CSS内的URL() 替换为绝对路径.亦可设置单独的静态文件服务器负载,减少静态文件对服务器的压力开销.\r\n\r\n无需过多人工干涉,代码管理方便,不会破坏原有代码.\r\n\r\nJS CSS版本变动后只需在URL后面再加一个参数,如代码变动之前为:\r\n```\r\n<script src=\"/compress.js?v=0.001&xx.js&xxx.js\"></script>\r\n```\r\n代码变动后改为:\r\n```\r\n<script src=\"/compress.js?v=0.002&xx.js&xxx.js\"></script>\r\n```\r\n这样压缩器就会去应用新的代码合并压缩.\r\n\r\n值得一提的是 压缩器还支持将远程跨域文件与本地文件合并压缩.\r\n\r\n如何使用压缩器来压缩JS CSS GSS LESS?\r\n\r\n和普通的JS CSS引用相同 唯一不同是以 /compress.*? 开头 （* 为文件类型后缀，目前支持css，gss，js, less, mss） 所有原来的JS CSS文件作为参数传入以&符号连接.\r\n\r\n如果你熟悉YUI Compressor这款工具对此方式应该并不陌生,这正是YAHOO所有服务器调用JS CSS的方法.\r\n\r\n如果你熟悉YUI框架对此也应该不会陌生 YUI 的 use 方法可以访问YAHOO的在线服务做到合并压缩,其格式也是这样的.\r\n\r\n如:\r\n```<script src=\"/compress.js?xx.js&xxx.js\"></script>```\r\n\r\n压缩器只会选取/compress的后缀作为压缩的类型，如上例中的compress.js.\r\n\r\n压缩器目前只支持的文件格式 JS CSS GSS LESS MSS, MSS作为混合格式，将所有传入的CSS LESS GSS各自解释编译，并压缩优化.\r\n\r\n如果想把CSS和GSS、LESS混合压缩使用 请将MSS作为后缀,如:\r\n```\r\n<link rel=\"stylesheet\" href=\"/compress.mss?style.gss&style1.css&style2.css&style.less\">\r\n```\r\n###什么是GSS?\r\n\r\nGSS是一个Java程序，它向CSS中添加了变量、函数、条件语句以及混合类型,使得我们更易于处理大型的CSS文件.\r\n\r\n开发者可以使用GSS这种工具来生成web应用程序或者网站所使用的真正的CSS文件.\r\n\r\n公共参数(gss css js 压缩通用):\r\n\r\n调试版本加debug参数,只合并不压缩加入nocompress参数\r\n\r\nJS独有参数:\r\n\r\n需要控制JS压缩级别加入level参数,0为只去空格和换行 1为普通压缩 2为高级压缩(慎用,会破坏接口,具体参考Closure Compiler官网),省略level参数默认为1\r\n\r\nCSS/GSS独有参数:\r\n\r\n需要对CSS美化而不压缩采用pretty参数\r\n\r\n参数如何加入:\r\n\r\n在/compress.css/gss?后面直接加入debug或其他参数即可\r\n\r\n如:/compress.css/gss?debug 或 /compress.css/gss?debug=true\r\n\r\n/compress.css/gss?level=0\r\n\r\nGSS浏览器/平台断言\r\n\r\n首先，建立GSS文件如style.gss。然后编写断言代码像这样：\r\n```\r\n        @if (BROWSER_IE) {\r\n        @if (BROWSER_IE6) {\r\n        @def GOOG_INLINE_BLOCK_DISPLAY inline;\r\n        } @elseif (BROWSER_IE7) {\r\n        @def GOOG_INLINE_BLOCK_DISPLAY inline;\r\n        } @else {\r\n        @def GOOG_INLINE_BLOCK_DISPLAY inline-block;\r\n        }\r\n        } @elseif (BROWSER_FF2) {\r\n        @def GOOG_INLINE_BLOCK_DISPLAY -moz-inline-box;\r\n        } @elseif (BROWSER_CHROME) {\r\n        @def GOOG_INLINE_BLOCK_DISPLAY -webkit-inline-box;\r\n        } @elseif(PLATFORM_MOBILE){\r\n        @def GOOG_INLINE_BLOCK_DISPLAY -o-inline-box;\r\n        } @elseif(BROWSER_WEBKIT){\r\n        @if(PLATFORM_ANDROID){\r\n        @def GOOG_INLINE_BLOCK_DISPLAY -webkit-box;\r\n        }@else{\r\n        @def GOOG_INLINE_BLOCK_DISPLAY -webkit-inline-box;\r\n        }\r\n        } @else {\r\n        @def GOOG_INLINE_BLOCK_DISPLAY inline-block;\r\n        }\r\n\r\n        .goog-inline-block {\r\n        position: relative;\r\n        display: GOOG_INLINE_BLOCK_DISPLAY;\r\n        }\r\n```\r\nBROWSER_* 、PLATFORM_*为断言规则，根据浏览器用户代理生成，生成带有版本的浏览器和平台断言规则，浏览器版本截止至第二位，如BROWSER_FF2.4，BROWSER_FF2。\r\n\r\nBROWSER_*用来判断浏览器，PLATFORM_*用来判断平台，如PLATFORM_ANDROID、PLATFORM_MOBILE、PLATFORM_LINUX、PLATFORM_WINDOWS\r\n\r\n接着，加入到html中，像这样：\r\n```\r\n        <link href=\"/compress.gss?condition&/style/style.gss&/style/style1.css\" rel=\"stylesheet\">\r\n```\r\n然后，我们就可以用各种浏览器来测试了。或者选择直接更改用户代理来测试。\r\n\r\n*注：参数 condition 表示开启浏览器断言默认关闭，开启浏览器断言后，CSS的缓存将根据浏览器代理决定。\r\n\r\nGSS更多使用方法\r\n\r\n##变量\r\n\r\n变量是使用“@def”来定义的。下面的代码示例展示了如何使用变量：\r\n```\r\n    @def BG_COLOR rgb(235, 239, 249);\r\n    @def DIALOG_BG_COLOR BG_COLOR;\r\n    body {\r\n    background-color: BG_COLOR;\r\n    }\r\n\r\n    .dialog {\r\n    background-color: DIALOG_BG_COLOR;\r\n    }\r\n```\r\n得到的CSS如下：\r\n```\r\n    body {\r\n    background-color: #ebeff9;\r\n    }\r\n    .dialog {\r\n    background-color: #ebeff9;\r\n    }\r\n```\r\n##函数\r\n\r\nGSS引入了大量数学函数，使用它们你可以对数字型的值——比方说像素——进行以下操作： add()、 sub()、mult()、 div()、 min()以及max()。使用这些函数的示例如下：\r\n``\r\n    @def LEFT_WIDTH 100px;\r\n    @def LEFT_PADDING 5px;\r\n    @def RIGHT_PADDING 5px;\r\n    .content {\r\n    position: absolute;\r\n    margin-left: add(LEFT_PADDING,\r\n    LEFT_WIDTH,\r\n    RIGHT_PADDING,\r\n    px);\r\n```\r\n得到的CSS如下所示：\r\n```\r\n    .content {\r\n    position: absolute;\r\n    margin-left: 110px;\r\n    }\r\n```\r\n##更多内置函数:\r\n```\r\nadd()\r\nsub()\r\nmult()\r\ndivide()\r\nmin()\r\nmax()\r\nblendColorsHsb(startColor, endColor)\r\nblendColorsRgb(startColor, endColor)\r\nmakeMutedColor(backgroundColor, foregroundColor [, saturationLoss])\r\naddHsbToCssColor(baseColor, hueToAdd, saturationToAdd, brightnessToAdd)\r\nmakeContrastingColor(color, similarityIndex)\r\nadjustBrightness(color, brightness)\r\n```\r\n##条件语句\r\n\r\nGSS让我们可以使用@if、@elseif和@else，从而基于某些变量的值来创建条件语句的分支。\r\n\r\n##混合类型\r\n\r\n混合类型是为了重用带有参数的对结构体的声明，如下示例所示：\r\n```\r\n    @defmixin size(WIDTH, HEIGHT) {\r\n    width: WIDTH;\r\n    height: HEIGHT;\r\n    }\r\n\r\n    .image {\r\n    @mixin size(200px, 300px);\r\n    }\r\n当解决跨浏览器的问题时，混合类型会更有用：\r\n\r\n    @defmixin gradient(POS, HSL1, HSL2, HSL3, COLOR, FALLBACK_COLOR) {\r\n    background-color: FALLBACK_COLOR; /* fallback color if gradients are not supported */\r\n    background-image: -webkit-linear-gradient(POS, hsl(HSL1, HSL2, HSL3), COLOR); /* Chrome 10+,Safari 5.1+ */\r\n    /* @alternate */ background-image: -moz-linear-gradient(POS, hsl(HSL1, HSL2, HSL3), COLOR); /* FF3.6+ */\r\n    /* @alternate */ background-image: -ms-linear-gradient(POS, hsl(HSL1, HSL2, HSL3), COLOR); /* IE10 */\r\n    /* @alternate */ background-image: -o-linear-gradient(POS, hsl(HSL1, HSL2, HSL3), COLOR); /* Opera 11.10+ */\r\n    }\r\n\r\n    .header {\r\n    @mixin gradient(top, 0%, 50%, 70%, #cc0000, #f07575);\r\n    }\r\n```\r\n结果如下：\r\n```\r\n    .header {\r\n    background-color: #f07575;\r\n    background-image: -webkit-linear-gradient(top,hsl(0%,50%,70%) ,#cc0000);\r\n    background-image: -moz-linear-gradient(top,hsl(0%,50%,70%) ,#cc0000);\r\n    background-image: -ms-linear-gradient(top,hsl(0%,50%,70%) ,#cc0000);\r\n    background-image: -o-linear-gradient(top,hsl(0%,50%,70%) ,#cc0000);\r\n    }\r\n```\r\n/* @alternate */ 注解说明\r\n\r\n我们在上面代码中看到了注解alternate,这个注解是用来标记压缩时保留此CSS项,也不做错误检查.\r\n\r\n###LESS?\r\n\r\nless语法及使用请参考中文官方 http://www.lesscss.net/\r\n\r\n压缩器为less同样提供了浏览器断言如：\r\n```\r\n@nice-blue: #5B83AD;\r\n@light-blue: @nice-blue + #111;\r\n\r\n#header {\r\n    .mixin\r\n}\r\n/**默认值必须在最前面**/\r\n.mixin(){\r\n    color: @light-blue;\r\n}\r\n\r\n.mixin()when (@BROWSER_WEBKIT) {\r\n    color: @nice-blue;\r\n}\r\n```\r\n@BROWSER_WEBKIT为断言规则，断言规则同GSS断言。\r\n\r\n与GSS不同，LESS不支持if/else的判断，而是用混合的引导方式，如上面的代码，混合必须有一个默认值，或者必须有一个永远为真的引导（when），这个默认值/引导（when）必须在其他引导之前。"}